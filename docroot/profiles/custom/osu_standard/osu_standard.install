<?php

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\shortcut\Entity\Shortcut;
use Drupal\taxonomy\Entity\Vocabulary;
use Drupal\user\Entity\Role;
use Drupal\user\Entity\User;

/**
 * Implements hook_install().
 */
function osu_standard_install($is_syncing) {
  // Assign user 1 the "administrator" role.
  /** @var \Drupal\user\Entity\User $user */
  $user = User::load(1);
  $user->roles[] = 'administrator';
  $user->save();

  // Populate the default shortcut set.
  $shortcut = Shortcut::create([
    'shortcut_set' => 'default',
    'title' => t('Add content'),
    'weight' => -20,
    'link' => ['uri' => 'internal:/node/add'],
  ]);
  $shortcut->save();

  $shortcut = Shortcut::create([
    'shortcut_set' => 'default',
    'title' => t('All content'),
    'weight' => -19,
    'link' => ['uri' => 'internal:/admin/content'],
  ]);
  $shortcut->save();
  // Set Page cache to a year.
  $page_cache = Drupal::configFactory()->getEditable('system.performance');
  $page_cache->set('cache.page.max_age', 31536000);
  $page_cache->save();

  Vocabulary::create([
    'vid' => 'osu_organization',
    'name' => 'Organization',
    'description' => 'A set of tags to represent the structure of your organization. e.g. Schools and/or Units',
  ])->save();

}

/**
 * Update CAS Settings on existing sites.
 */
function osu_standard_update_8001() {
  $config_factory = Drupal::configFactory();
  $cas_settings = $config_factory->getEditable('cas.settings');
  $cas_server_settings = $cas_settings->get('server');
  $cas_server_settings['path'] = '/idp/profile/cas';
  $cas_settings->set('server', $cas_server_settings);
  $cas_settings->save(TRUE);

  $cas_attributes = $config_factory->getEditable('cas_attributes.settings');
  $cas_attributes_fields = $cas_attributes->get('field');
  $cas_attributes_fields['mappings'] = [
    "name" => "[cas:attribute:givenName] [cas:attribute:surname]",
    "mail" => "[cas:attribute:osuprimarymail]",
  ];
  $cas_attributes->set('field', $cas_attributes_fields);

  $cas_attributes_roles = $cas_attributes->get('role');
  if (count($cas_attributes_roles['mappings']) == 0) {
    $cas_attributes_roles['mappings'] = [
      [
        "rid" => "administrator",
        "attribute" => "entitlement_drupal",
        "value" => "urn:mace:oregonstate.edu:entitlement:drupal-admin",
        "method" => "exact_any",
        "negate" => FALSE,
        "remove_without_match" => TRUE,
      ],
    ];
  }
  $cas_attributes->set('role', $cas_attributes_roles);
  $cas_attributes->save(TRUE);

}

/**
 * Enable OSU Seckit module.
 */
function osu_standard_update_8002() {
  Drupal::service('module_installer')->install([
    'seckit',
    'osu_seckit',
  ], TRUE);
  return t('Installed new modules, Seckit and OSU Seckit');
}

/**
 * Install and Configure metatag.
 */
function osu_standard_update_8003() {
  Drupal::service('module_installer')->install([
    'metatag',
    'metatag_google_cse',
    'metatag_open_graph',
    'metatag_twitter_cards',
    'metatag_verification',
    'metatag_views',
  ], TRUE);
  $install_profile_path = Drupal::service('module_handler')
    ->getModule('osu_standard')
    ->getPath();
  $config_path = realpath($install_profile_path . '/config/install');
  $config_storage = Drupal::service('config.storage');
  $source = new FileStorage($config_path);
  $metatag_defaults = glob($config_path . '/metatag.metatag_defaults.*.yml');
  foreach ($metatag_defaults as $metatag_default) {
    $metatag_config_name = basename($metatag_default, '.yml');
    $config_storage->write($metatag_config_name, $source->read($metatag_config_name));
  }
  return t('Installed Metatag modules and imported configurations');
}

/**
 * Add new roles to existing sites.
 */
function osu_standard_update_8004(&$sandbox) {
  Drupal::service('module_installer')->install([
    'better_exposed_filters',
    'admin_toolbar_links_access_filter',
    'media_bulk_upload',
    'media_bulk_upload_dropzonejs',
    'webform',
    'webform_access',
    'webform_attachment',
    'webform_bootstrap',
    'webform_node',
    'webform_ui',
    'section_library',
    'views_bulk_edit',
    'views_bulk_operations',
  ], TRUE);
  $roles = Role::loadMultiple();
  $install_profile_path = Drupal::service('module_handler')
    ->getModule('osu_standard')
    ->getPath();
  $config_path = realpath($install_profile_path . '/config/install');
  $config_storage = Drupal::service('config.storage');
  $source = new FileStorage($config_path);
  $osu_standard_roles = glob($config_path . '/user.role.*.yml');
  foreach ($osu_standard_roles as $osu_standard_role) {
    $osu_standard_role_name = basename($osu_standard_role, '.yml');
    $role_name = explode('user.role.', $osu_standard_role_name);
    if (!array_key_exists($role_name[1], $roles)) {
      $config_storage->write($osu_standard_role_name, $source->read($osu_standard_role_name));
    }
  }
  // Grant extra permissions to the authenticated role.
  $authenticated_role = Role::load('authenticated');
  $authenticated_role->grantPermission('access toolbar');
  $authenticated_role->grantPermission('access administration pages');
  $authenticated_role->grantPermission('view the administration theme');
  $authenticated_role->setWeight(-9);
  $authenticated_role->save();
  // Update the weight of the anonymous role.
  $anonymous_role = Role::load('anonymous');
  $anonymous_role->setWeight(-10);
  $anonymous_role->save();
  return t('Installed modules, imported missing roles and added permissions to authenticated role.');
}

/**
 * Add Dropzone permission to architect role.
 */
function osu_standard_update_8005(&$sandbox) {
  $architect = Role::load('architect');
  $architect->grantPermission('dropzone upload files');
  $architect->save();
  return t('Architect Role can now use Dropzone file uploader');
}

/**
 * Update permissions for different roles.
 */
function osu_standard_update_9001(&$sandbox) {
  $architect = Role::load('architect');
  $architect->grantPermission('add section library templates');
  $architect->grantPermission('delete section library templates');
  $architect->grantPermission('edit section library templates');
  $architect->grantPermission('export configuration');
  $architect->grantPermission('import configuration');
  $architect->grantPermission('import template from section library');
  $architect->grantPermission('synchronize configuration');
  $architect->grantPermission('view section library templates');
  $architect->save();

  $manage_layout_template = Role::load('manage_layout_templates');
  $manage_layout_template->grantPermission('delete section library templates');
  $manage_layout_template->grantPermission('import template from section library');
  $manage_layout_template->save();

  $manage_site_config = Role::load('manage_site_configuration');
  $manage_site_config->grantPermission('export configuration');
  $manage_site_config->grantPermission('import configuration');
  $manage_site_config->grantPermission('synchronize configuration');
  $manage_site_config->save();
  return t('Update roles for added permissions.');
}

/**
 * Enable views_conditional module.
 */
function osu_standard_update_9002(&$sandbox) {
  Drupal::service('module_installer')->install([
    'views_conditional',
  ], TRUE);
  return t('Enabled views_conditional');
}

/**
 * Re-order text format default.
 */
function osu_standard_update_9003(&$sandbox) {
  $full_html = Drupal::configFactory();
  $filter_weight = $full_html->getEditable('filter.format.full_html');
  $filter_weight->set('weight', -50);
  $filter_weight->save(TRUE);
}

/**
 * Uninstall fontawesome_menu_icons module.
 */
function osu_standard_update_9004(&$sandbox) {
  Drupal::service('module_installer')->uninstall(['fontawesome_menu_icons']);
  return t('fontawesome_menu_icons has been uninstalled');
}

/**
 * Delete the Article content type.
 */
function osu_standard_update_9005(&$sandbox) {
  // Get all article nodes and delete.
  $storage_handler = Drupal::entityTypeManager()->getStorage('node');
  $articles = $storage_handler->loadByProperties(['type' => 'article']);
  try {
    $storage_handler->delete($articles);
  }
  catch (EntityStorageException $entityStorageException) {
    Drupal::logger('osu_standard')->notice('No nodes found to delete.');
  }
  // Delete the content type article.
  $content_type = Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->load('article');
  if (!is_null($content_type)) {
    try {
      $content_type->delete();
    }
    catch (EntityStorageException $entityStorageException) {
      Drupal::logger('osu_standard')
        ->notice('Node type of article not found.');
    }
    return t('Node type Article Removed.');
  }
  return t('Node type Article not found');
}

/**
 * Update Linkit Profiles
 */
function osu_standard_update_9006(&$sandbox) {
  /** @var \Drupal\Core\Config\Config $config */
  $config = Drupal::service('config.factory')
    ->getEditable('linkit.linkit_profile.default');
  $linkit_matchers = $config->get('matchers');
  foreach ($linkit_matchers as &$matcher) {
    switch ($matcher["id"]) {
      case 'entity:media':
        $matcher["settings"]["metadata"] = "by [media:uid:entity:account-name] | [media:created:date:medium]";
        $matcher["settings"]["group_by_bundle"] = TRUE;
        $matcher["settings"]["substitution_type"] = "media";
        break;

      case 'entity:node':
        $matcher["settings"]["group_by_bundle"] = TRUE;
        break;
    }
  }
  $config->set('matchers', $linkit_matchers);
  $config->save();
}

/**
 * Update Bootstrap Styles for alignment, effects border widths and border
 * style.
 */
function osu_standard_update_9007(&$sandbox) {
  $bootstrap_style_updates = [
    'items_alignment' => "osu-align-items-start|Top\r\nosu-align-items-center|Center\r\nosu-align-items-end|Bottom",
    'border_style' => "bs-border-style-solid|Solid",
    'border_left_style' => "bs-border-style-left-solid|Solid",
    'border_top_style' => "bs-border-style-top-solid|Solid",
    'border_right_style' => "bs-border-style-right-solid|Solid",
    'border_bottom_style' => "bs-border-style-bottom-solid|Solid",
    'border_width' => "osu-border-width-1|Width 1\r\nosu-border-width-2|Width 2\r\nosu-border-width-3|Width 3\r\nosu-border-width-4|Width 4\r\nosu-border-width-5|Width 5",
    'border_left_width' => "osu-border-width-left-1|Width 1\r\nosu-border-width-left-2|Width 2\r\nosu-border-width-left-3|Width 3\r\nosu-border-width-left-4|Width 4\r\nosu-border-width-left-5|Width 5",
    'border_top_width' => "osu-border-width-top-1|Width 1\r\nosu-border-width-top-2|Width 2\r\nosu-border-width-top-3|Width 3\r\nosu-border-width-top-4|Width 4\r\nosu-border-width-top-5|Width 5",
    'border_right_width' => "osu-border-width-right-1|Width 1\r\nosu-border-width-right-2|Width 2\r\nosu-border-width-right-3|Width 3\r\nosu-border-width-right-4|Width 4\r\nosu-border-width-right-5|Width 5",
    'border_bottom_width' => "osu-border-width-bottom-1|Width 1\r\nosu-border-width-bottom-2|Width 2\r\nosu-border-width-bottom-3|Width 3\r\nosu-border-width-bottom-4|Width 4\r\nosu-border-width-bottom-5|Width 5",
    'scroll_effects' => "fade-zoom-in|Fade In\r\nfade-up|Fade Up\r\nfade-down|Fade Down\r\nfade-left|Fade Left\r\nfade-right|Fade Right\r\nfade-up-right|Fade Up Right\r\nfade-up-left|Fade Up Left\r\nfade-down-right|Fade Down Right\r\nfade-down-left|Fade Down Left\r\nzoom-in|Zoom In\r\nzoom-in-up|Zoom In Up\r\nzoom-in-down|Zoom In Down\r\nzoom-in-left|Zoom In Left\r\nzoom-in-right|Zoom In Right\r\nzoom-out|Zoom Out\r\nzoom-out-up|Zoom Out Up\r\nzoom-out-down|Zoom Out Down\r\nzoom-out-right|Zoom Out Right\r\nzoom-out-left|Zoom Out Left",
  ];
  $config = Drupal::service('config.factory')
    ->getEditable('bootstrap_styles.settings');
  foreach ($bootstrap_style_updates as $bootstrap_style_key => $bootstrap_style_update) {
    $config->set($bootstrap_style_key, $bootstrap_style_update);
  }
  $config->save();
}

/**
 * Add OSU minimum height classes to bootstrap styles alignment setting.
 */
function osu_standard_update_9008(&$sandbox) {
  Drupal::service('module_installer')->install([
    'osu_bootstrap_layout_builder',
  ], TRUE);
  $min_height_options = "osu-min-h-100|100px\r\nosu-min-h-200|200px\r\nosu-min-h-300|300px\r\nosu-min-h-400|400px\r\nosu-min-h-500|500px\r\nosu-min-h-600|600px\r\nosu-min-h-700|700px\r\nosu-min-h-800|800px";
  $config = Drupal::service('config.factory')
    ->getEditable('bootstrap_styles.settings');
  $config->set('min_height', $min_height_options);
  $config->save();
}

/**
 * Updates for osu_profiles module
 */
function osu_standard_update_9009(&$sandbox) {
  // Ensure dependencies are installed first.
  Drupal::service('module_installer')->install([
    'field_group',
    'address',
  ], TRUE);
  // Content installed by this module isn't immediately available
  // We install it first separately so the content is ready when osu_profile needs it
  Drupal::service('module_installer')->install([
    'osu_default_content',
  ], TRUE);

  Drupal::service('module_installer')->install([
    'auto_entitylabel',
    'osu_profile',
  ], TRUE);

  $config = Drupal::service('config.factory')
    ->getEditable('exclude_node_title.settings');
  $content_types = $config->get('content_types');
  $content_types['osu_profile'] = 'all';
  $config->set('content_types', $content_types);
  $content_modes = $config->get('content_type_modes');
  $content_modes['osu_profile'] = ['full', 'teaser'];
  $config->set('content_type_modes', $content_modes);

  $config->save();

  return t('Enabled osu_profile');
}

/**
 * Remove media_card_caption from embed options.
 */
function osu_standard_update_9010(&$sandbox) {
  /** @var  \Drupal\Core\Config\Config $full_html */
  $full_html = Drupal::service('config.factory')
    ->getEditable('filter.format.full_html');
  $dependencies = $full_html->get('dependencies');
  $dependencies['config'] = array_filter($dependencies['config'], fn($config_key) => $config_key != "core.entity_view_mode.media.media_card_caption");
  $full_html->set('dependencies', $dependencies);
  $filters = $full_html->get('filters');
  unset($filters['media_embed']['settings']['allowed_view_modes']['media_card_caption']);
  $full_html->set('filters', $filters);
  $full_html->save();
}

/**
 * Add font size styles to full_html editor
 */
function osu_standard_update_9011(&$sandbox) {
  $config = Drupal::configFactory();
  $full_html = $config->getEditable('editor.editor.full_html');
  $full_html->set(
    'settings.plugins.stylescombo.styles',
    "table.osu-table|Dark Table\r\ntable.osu-table-orange|Beaver Orange Table\r\np.display-1|Display 1\r\np.display-2|Display 2\r\np.display-3|Display 3\r\np.display-4|Display 4\r\np.display-5|Display 5\r\np.fs-1|Font Size 1\r\np.fs-2|Font Size 2\r\np.fs-3|Font Size 3\r\np.fs-4|Font Size 4\r\np.fs-5|Font Size 5\r\np.fs-6|Font Size 6"
  );
  $full_html->save(TRUE);
}

/**
 * Enable easy_breadcrumb
 */
function osu_standard_update_9012(&$sandbox) {
  Drupal::service('module_installer')->install([
    'easy_breadcrumb',
  ], TRUE);

  return t('Enabled easy_breadcrumb');
}

/**
 * Setup sticky toc
 */
function osu_standard_update_9013(&$sandbox) {
  Drupal::service('module_installer')->install([
    'toc_js',
    'toc_js_per_node',
  ], TRUE);

  $architect = Role::load('architect');
  $architect->grantPermission('administer toc_js');
  $architect->grantPermission('administer toc_js per node');
  $architect->grantPermission('administer easy breadcrumb');
  $architect->save();

  $content_authors = Role::load('content_authors');
  $content_authors->grantPermission('administer toc_js per node');
  $content_authors->save();

  $manage_content = Role::load('manage_content');
  $manage_content->grantPermission('administer toc_js per node');
  $manage_content->save();

  $manage_site_configuration = Role::load('manage_site_configuration');
  $manage_site_configuration->grantPermission('administer toc_js');
  $manage_site_configuration->grantPermission('administer easy breadcrumb');
  $manage_site_configuration->save();

  $page = Drupal::configFactory()->getEditable('node.type.page');
  $settings = $page->get('third_party_settings');
  $settings['toc_js'] = [
    "toc_js_active" => 1,
    "title" => "Table of contents",
    "selectors" => "h2, h3",
    "selectors_minimum" => "0",
    "container" => ".node",
    "prefix" => "toc",
    "list_type" => "ul",
    "classes" => "",
    "back_to_top" => 0,
    "back_to_top_label" => "Back to top",
    "smooth_scrolling" => 1,
    "scroll_to_offset" => "0",
    "highlight_on_scroll" => 1,
    "highlight_offset" => "100",
    "sticky" => 1,
    "sticky_offset" => "0",
    "sticky_stop" => "",
    "sticky_stop_padding" => "0",
  ];
  $settings['toc_js_per_node'] = [
    "override" => 1,
    "override_default" => 0,
  ];
  $page->set('third_party_settings', $settings);
  $page->save();

  return t('Sticky toc enabled');
}

/**
 * Ensure that our paths have updated.
 */
function osu_standard_update_9014(&$sandbox) {
  $config = Drupal::configFactory();
  $path_auto_pattern = $config->getEditable('pathauto.pattern.pattern_for_all_basic_page_paths');
  $selection_criteria = $path_auto_pattern->get('selection_criteria');
  $selection_criteria_id = $selection_criteria[array_key_first($selection_criteria)]['id'];
  if ($selection_criteria_id === 'node_type') {
    $selection_criteria[array_key_first($selection_criteria)]['id'] = "entity_bundle:node";
  }
  $path_auto_pattern->set('selection_criteria', $selection_criteria);
  $path_auto_pattern->save();
}


/**
 * Install new modules.
 */
function osu_standard_update_9015(&$sandbox) {
  Drupal::service('module_installer')->install([
    'field_group',
    'paragraphs',
    'entity_reference_revisions',
    'address',
  ], TRUE);
}

/**
 * Add vocabulary to existing sites.
 */
function osu_standard_update_9016(&$sandbox) {
  Vocabulary::create([
    'vid' => 'osu_organization',
    'name' => 'Organization',
    'description' => 'A set of tags to represent the structure of your organization. e.g. Schools and/or Units',
  ])->save();
}

/**
 * Add date_ap_style module.
 */
function osu_standard_update_9017(&$sandbox) {
  Drupal::service('module_installer')->install([
    'date_ap_style',
  ], TRUE);

  $architect = Role::load('architect');
  $architect->grantPermission('administer ap style settings');
  $architect->save();

  $manage_site_configuration = Role::load('manage_site_configuration');
  $manage_site_configuration->grantPermission('administer ap style settings');
  $manage_site_configuration->save();

}

/**
 * Add module layout_builder_operation_link.
 */
function osu_standard_update_9018(&$sandbox) {
  Drupal::service('module_installer')->install([
    'layout_builder_operation_link',
  ], TRUE);
}

/**
 * Install OSU Story module.
 */
function osu_standard_update_9019(&$sandbox) {
  $install_profile_path = Drupal::service('module_handler')
    ->getModule('osu_standard')
    ->getPath();
  $install_profile_config_path = realpath($install_profile_path . '/config/install');
  $file_source = new FileStorage($install_profile_config_path);
  if (is_null(FieldStorageConfig::load('node.field_tags'))) {
    FieldStorageConfig::create($file_source->read('field.storage.node.field_tags'))
      ->save();
  }
  if (is_null(FieldStorageConfig::load('node.field_osu_organizations'))) {
    FieldStorageConfig::create($file_source->read('field.storage.node.field_osu_organizations'))
      ->save();
  }
  Drupal::service('module_installer')->install([
    'osu_story',
  ], TRUE);
}

/**
 * Update Bootstrap Styles configuration.
 */
function osu_standard_update_9020(&$sandbox) {
  $install_profile_path = Drupal::service('module_handler')
    ->getModule('osu_standard')
    ->getPath();
  $install_profile_config_path = realpath($install_profile_path . '/config/install');
  $file_source = new FileStorage($install_profile_config_path);
  /** @var \Drupal\Core\Config\Config $config */
  $config = Drupal::service('config.factory')
    ->getEditable('bootstrap_styles.settings');
  $bootstrap_styles_config_file = $file_source->read('bootstrap_styles.settings');
  foreach ($bootstrap_styles_config_file as $key => $value) {
    $config->set($key, $value);
  }
  $config->save();
}

/**
 * Install Feeds, Feeds Tamper, & update Architect role with Feeds permissions.
 */
function osu_standard_update_9021(&$sandbox) {
  Drupal::service('module_installer')->install([
    'feeds',
    'feeds_ex',
    'feeds_tamper',
    'tamper',
  ], TRUE);

  $architect = Role::load('architect');
  $architect->grantPermission('access feed overview');
  $architect->grantPermission('administer feeds');
  $architect->grantPermission('administer feeds_tamper');
  $architect->save();

}

/**
 * Add new breakpoints for two column.
 */
function osu_standard_update_9022(&$sandbox) {
  $bootstrap_layout_builder_updates = [
    'bootstrap_layout_builder.breakpoint.extra_wide_desktop',
    'bootstrap_layout_builder.breakpoint.wide_desktop',
    'bootstrap_layout_builder.layout_option.blb_col_1_full_width',
    'bootstrap_layout_builder.layout_option.blb_col_2_25_75',
    'bootstrap_layout_builder.layout_option.blb_col_2_75_25',
    'bootstrap_layout_builder.layout_option.blb_col_2_two_equal_columns',
  ];
  $install_profile_path = Drupal::service('module_handler')
    ->getModule('osu_standard')
    ->getPath();
  $install_profile_config_path = realpath($install_profile_path . '/config/install');
  $file_source = new FileStorage($install_profile_config_path);
  foreach ($bootstrap_layout_builder_updates as $bootstrap_layout_builder_update) {
    /** @var \Drupal\Core\Config\CachedStorage $config_storage */
    $config_storage = Drupal::service('config.storage');
    $config_storage->write($bootstrap_layout_builder_update, $file_source->read($bootstrap_layout_builder_update));
  }
  return t('Updated Bootstrap Layout Builder Breakpoints with new option');
}

/**
 * Force the two new breakpoints to be at the top of all lists.
 */
function osu_standard_update_9023(&$sandbox) {
  /** @var Drupal\Core\Config\ConfigFactory $config */
  $config = Drupal::service('config.factory');
  $wide_desktop = $config->getEditable('bootstrap_layout_builder.breakpoint.wide_desktop');
  $wide_desktop->set('weight', '-14');
  $wide_desktop->save();

  $extra_wide_desktop = $config->getEditable('bootstrap_layout_builder.breakpoint.extra_wide_desktop');
  $extra_wide_desktop->set('weight', '-15');
  $extra_wide_desktop->save();
}

/**
 * Update Easy Breadcrumb Configuration to hide Front page if it's the only one.
 */
function osu_standard_update_9024(&$sandbox) {
  /** @var Drupal\Core\Config\ConfigFactory $config */
  $config = Drupal::service('config.factory');
  $easy_breadcrumb = $config->getEditable('easy_breadcrumb.settings');
  $easy_breadcrumb->set('hide_single_home_item', TRUE);
  $easy_breadcrumb->save();
}

/**
 * Install new modules for Library items and block_class.
 */
function osu_standard_update_9025(&$sandbox) {
  Drupal::service('module_installer')->install([
    'block_class',
    'osu_library_hero',
    'osu_library_three_column_cards',
    'osu_library_three_column_equal',
    'osu_library_two_column_25_75',
    'osu_library_two_column_50_50',
  ], TRUE);
}

/**
 * Install XMLSitemap and update Architect role permissions.
 */
function osu_standard_update_9026(&$sandbox) {
  Drupal::service('module_installer')->install([
    'xmlsitemap',
  ], TRUE);

  $architect = Role::load('architect');
  $architect->grantPermission('administer xmlsitemap');
  $architect->grantPermission('override xmlsitemap link settings');
  $architect->save();

}

/**
 * Add oembed module with kaltura media type
 */
function osu_standard_update_9027(&$sandbox) {
  Drupal::service('module_installer')->install([
    'oembed_providers',
  ], TRUE);

  $kaltura_media_type_configs = [
    'core.entity_form_display.media.kaltura.default',
    'core.entity_form_display.media.kaltura.media_library',
    'core.entity_view_display.media.kaltura.default',
    'core.entity_view_display.media.kaltura.media_library',
    'field.field.media.kaltura.field_media_oembed_video',
    'field.storage.media.field_media_oembed_video',
    'media.type.kaltura',
    'oembed_providers.bucket.kaltura',
    'oembed_providers.provider.osu_mediaspace',
  ];
  $install_profile_path = Drupal::service('module_handler')
    ->getModule('osu_standard')
    ->getPath();
  $install_profile_config_path = realpath($install_profile_path . '/config/install');
  $file_source = new FileStorage($install_profile_config_path);
  foreach ($kaltura_media_type_configs as $config_name) {
    /** @var \Drupal\Core\Config\CachedStorage $config_storage */
    $config_storage = Drupal::service('config.storage');
    $config_storage->write($config_name, $file_source->read($config_name));
  }

  return t('Installed oembed_providers and added kaltura as a media type');
}

/**
 * Enable extra ctools modules.
 */
function osu_standard_update_9028(&$sandbox) {
  Drupal::service('module_installer')->install([
    'ctools_block',
    'ctools_views',
  ], TRUE);
  return t('Enabled CTools Blocks and CTools Views');
}

/**
 * Install new Modules, ckeditor_liststyle, .
 */
function osu_standard_update_9029(&$sandbox) {
  Drupal::service('module_installer')->install([
    'ckeditor_liststyle',
  ], TRUE);
}

/**
 * Add google tag manager module.
 */
function osu_standard_update_9030(&$sandbox) {
  /** @var Drupal\Core\ProxyClass\Extension\ModuleInstaller $module_installer_service */
  $module_installer_service = Drupal::service('module_installer');
  $module_installer_service->install([
    'editoria11y',
    'google_cse',
    'google_tag',
    'osu_google_tag',
  ]);

  // Grant permissions to architect.
  $architect = Role::load('architect');
  $architect->grantPermission('administer account settings');
  $architect->grantPermission('administer block css classes');
  $architect->grantPermission('administer editoria11y checker');
  $architect->grantPermission('link to any page');
  $architect->grantPermission('manage editoria11y results');
  $architect->grantPermission('mark as hidden in editoria11y');
  $architect->grantPermission('mark as ok in editoria11y');
  $architect->grantPermission('view editoria11y checker');
  $architect->save();

  $anonymous = Role::load('anonymous');
  $anonymous->grantPermission('search Google CSE');
  $anonymous->save();

  $authenticated = Role::load('authenticated');
  $authenticated->grantPermission('search Google CSE');
  $authenticated->save();

  $manage_site_configuration = Role::load('manage_site_configuration');
  $manage_site_configuration->grantPermission('administer google tag manager');
  $manage_site_configuration->save();
}

/**
 * Configure google cse for all sites.
 */
function osu_standard_update_9031(&$sandbox) {

  $site_host = Drupal::request()->getHost();
  $site_host = str_replace(['dev.', 'stage.'], '', $site_host);

  /** @var \Drupal\Core\Config\CachedStorage $config_storage */
  $config_storage = Drupal::service('config.storage');

  $install_profile_path = Drupal::service('module_handler')
    ->getModule('osu_standard')
    ->getPath();
  $install_profile_config_path = realpath($install_profile_path . '/config/install');

  $file_source = new FileStorage($install_profile_config_path);

  $google_search_config = $file_source->read('search.page.google_cse_search');
  $google_search_config['configuration']['limit_domain'] = $site_host;
  $config_storage->write('search.page.google_cse_search', $google_search_config);
}

/**
 * Add CAPTCHA, reCAPTCHA, and Honeypot module.
 */
function osu_standard_update_9032(&$sandbox) {
  /** @var Drupal\Core\ProxyClass\Extension\ModuleInstaller $module_installer_service */
  $module_installer_service = Drupal::service('module_installer');
  $module_installer_service->install([
    'captcha',
    'honeypot',
    'recaptcha',
  ]);

  // Grant permissions to architect.
  $architect = Role::load('architect');
  $architect->grantPermission('administer CAPTCHA settings');
  $architect->grantPermission('administer honeypot');
  $architect->grantPermission('administer recaptcha');
  $architect->grantPermission('bypass honeypot protection');
  $architect->grantPermission('skip CAPTCHA');
  $architect->save();

  // Grant permissions to content authors.
  $content_authors = Role::load('content_authors');
  $content_authors->grantPermission('bypass honeypot protection');
  $content_authors->grantPermission('skip CAPTCHA');
  $content_authors->save();

  // Grant permissions to manage asset injector.
  $manage_asset_injector = Role::load('manage_asset_injector');
  $manage_asset_injector->grantPermission('bypass honeypot protection');
  $manage_asset_injector->grantPermission('skip CAPTCHA');
  $manage_asset_injector->save();

  // Grant permissions to manage blocks.
  $manage_blocks = Role::load('manage_blocks');
  $manage_blocks->grantPermission('bypass honeypot protection');
  $manage_blocks->grantPermission('skip CAPTCHA');
  $manage_blocks->save();

  // Grant permissions to manage content.
  $manage_content = Role::load('manage_content');
  $manage_content->grantPermission('bypass honeypot protection');
  $manage_content->grantPermission('skip CAPTCHA');
  $manage_content->save();

  // Grant permissions to manage layout templates.
  $manage_layout_templates = Role::load('manage_layout_templates');
  $manage_layout_templates->grantPermission('bypass honeypot protection');
  $manage_layout_templates->grantPermission('skip CAPTCHA');
  $manage_layout_templates->save();

  // Grant permissions to manage menus.
  $manage_menus = Role::load('manage_menus');
  $manage_menus->grantPermission('bypass honeypot protection');
  $manage_menus->grantPermission('skip CAPTCHA');
  $manage_menus->save();

  // Grant permissions to manage site configuration.
  $manage_site_configuration = Role::load('manage_site_configuration');
  $manage_site_configuration->grantPermission('administer CAPTCHA settings');
  $manage_site_configuration->grantPermission('administer honeypot');
  $manage_site_configuration->grantPermission('administer recaptcha');
  $manage_site_configuration->grantPermission('bypass honeypot protection');
  $manage_site_configuration->grantPermission('skip CAPTCHA');
  $manage_site_configuration->save();

  // Grant permissions to manage taxonomy.
  $manage_taxonomy = Role::load('manage_taxonomy');
  $manage_taxonomy->grantPermission('bypass honeypot protection');
  $manage_taxonomy->grantPermission('skip CAPTCHA');
  $manage_taxonomy->save();

  // Grant permissions to manage users.
  $manage_users = Role::load('manage_users');
  $manage_users->grantPermission('bypass honeypot protection');
  $manage_users->grantPermission('skip CAPTCHA');
  $manage_users->save();

  // Grant permissions to manage webforms.
  $manage_webforms = Role::load('manage_webforms');
  $manage_webforms->grantPermission('bypass honeypot protection');
  $manage_webforms->grantPermission('skip CAPTCHA');
  $manage_webforms->save();
}

/**
 * Configure CAPTCHA, reCAPTCHA, and Honeypot for all sites.
 */
function osu_standard_update_9033(&$sandbox) {
  /** @var \Drupal\Core\Config\CachedStorage $config_storage */
  $config_storage = Drupal::service('config.storage');

  $install_profile_path = Drupal::service('module_handler')
    ->getModule('osu_standard')
    ->getPath();
  $install_profile_config_path = realpath($install_profile_path . '/config/install');

  $file_source = new FileStorage($install_profile_config_path);

  $captcha_config = $file_source->read('captcha.settings');
  $captcha_contact_msg_feedback_config = $file_source->read('captcha.captcha_point.contact_message_feedback_form');
  $captcha_contact_msg_personal_config = $file_source->read('captcha.captcha_point.contact_message_personal_form');
  $captcha_user_login_config = $file_source->read('captcha.captcha_point.user_login_form');
  $captcha_user_pass_config = $file_source->read('captcha.captcha_point.user_pass');
  $captcha_user_register_config = $file_source->read('captcha.captcha_point.user_register_form');
  $honeypot_config = $file_source->read('honeypot.settings');
  $recaptcha_config = $file_source->read('recaptcha.settings');
  $config_storage->write('captcha.settings', $captcha_config);
  $config_storage->write('captcha.settings', $captcha_contact_msg_feedback_config);
  $config_storage->write('captcha.settings', $captcha_contact_msg_personal_config);
  $config_storage->write('captcha.settings', $captcha_user_login_config);
  $config_storage->write('captcha.settings', $captcha_user_pass_config);
  $config_storage->write('captcha.settings', $captcha_user_register_config);
  $config_storage->write('captcha.settings', $honeypot_config);
  $config_storage->write('captcha.settings', $recaptcha_config);
}

/**
 * Add Google Analytics.
 */
function osu_standard_update_9034(&$sandbox) {
  Drupal::service('module_installer')->install([
    'google_analytics',
  ], TRUE);

  $architect = Role::load('architect');
  $architect->grantPermission('administer google analytics');
  $architect->save();

  $manage_site_configuration = Role::load('manage_site_configuration');
  $manage_site_configuration->grantPermission('administer google analytics');
  $manage_site_configuration->save();

  return t('Enabled Google Analytics and assigned permissions.');
}

/**
 * Add node_revision_delete module and configurations.
 */
function osu_standard_update_9035(&$sandbox) {
  Drupal::service('module_installer')->install([
    'node_revision_delete',
  ], TRUE);
  $architect = Role::load('architect');
  $architect->grantPermission('administer node_revision_delete');
  $architect->save();

  $manage_site_configuration = Role::load('manage_site_configuration');
  $manage_site_configuration->grantPermission('administer node_revision_delete');
  $manage_site_configuration->save();

  /** @var Drupal\Core\Config\ConfigFactory $config */
  $config = Drupal::service('config.factory');
  $node_revision_delete_config = $config->getEditable('node_revision_delete.settings');
  $node_revision_delete_config->set('defaults.amount.status', TRUE);
  $node_revision_delete_config->set('defaults.amount.settings.amount', 25);
  $node_revision_delete_config->set('defaults.created.status', TRUE);
  $node_revision_delete_config->set('defaults.created.settings.age', 2);
  $node_revision_delete_config->save();
}

/**
 * Update bootstrap layout builder options.
 */
function osu_standard_update_9036(&$sandbox) {
  $bootstrap_layout_builder_updates = [
    'bootstrap_layout_builder.layout_option.blb_col_1_full_width',
    'bootstrap_layout_builder.layout_option.blb_col_2_full_width',
    'bootstrap_layout_builder.layout_option.blb_col_2_two_equal_columns',
    'bootstrap_layout_builder.layout_option.blb_col_3_full_width',
    'bootstrap_layout_builder.layout_option.blb_col_3_three_equal_columns',
    'bootstrap_layout_builder.layout_option.blb_col_4_four_equal_columns',
    'bootstrap_layout_builder.layout_option.blb_col_4_full_width',
    'bootstrap_layout_builder.layout_option.blb_col_5_2_2_4_2_2',
    'bootstrap_layout_builder.layout_option.blb_col_5_full_width',
    'bootstrap_layout_builder.layout_option.blb_col_6_full_width',
    'bootstrap_layout_builder.layout_option.blb_col_6_six_equal_columns',
  ];
  $install_profile_path = Drupal::service('module_handler')
    ->getModule('osu_standard')
    ->getPath();
  $install_profile_config_path = realpath($install_profile_path . '/config/install');
  $file_source = new FileStorage($install_profile_config_path);
  foreach ($bootstrap_layout_builder_updates as $bootstrap_layout_builder_update) {
    /** @var \Drupal\Core\Config\CachedStorage $config_storage */
    $config_storage = Drupal::service('config.storage');
    $config_storage->write($bootstrap_layout_builder_update, $file_source->read($bootstrap_layout_builder_update));
  }
  // Update bootstrap styles.
  $background_color_options = "osu-bg-page-default|Default\r\nosu-bg-page-alt-1|White\r\nosu-bg-page-alt-2|Dark\r\nosu-bg-moondust|Moondust\r\nosu-bg-crater|Crater\r\nosu-bg-osuorange|Beaver Orange\r\nosu-bg-light-grey|Light Grey\r\n";
  $box_shadow = "osu-shadow|Regular";
  $config = Drupal::service('config.factory')
    ->getEditable('bootstrap_styles.settings');
  $config->set('background_colors', $background_color_options);
  $config->set('box_shadow', $box_shadow);
  $config->save();
  return t('Updated Bootstrap Layout Builder Breakpoints with default options');
}

/**
 * Disable live preview option for bootstrap layout builder.
 */
function osu_standard_update_9037(&$sandbox) {
  /** @var Drupal\Core\Config\Config $bootstrap_layout_builder_settings */
  $bootstrap_layout_builder_settings = Drupal::service('config.factory')
    ->getEditable('bootstrap_layout_builder.settings');
  $bootstrap_layout_builder_settings->set('live_preview', FALSE);
  $bootstrap_layout_builder_settings->save();
}

/**
 * Add text_field_formatter module.
 */
function osu_standard_update_9038(&$sandbox) {
  Drupal::service('module_installer')->install([
    'text_field_formatter',
  ], TRUE);
  return t('Module text_field_formatter enabled.');
}

/**
 * Add extra xml sitemap modules.
 */
function osu_standard_update_9039(&$sandbox) {
  Drupal::service('module_installer')->install([
    'xmlsitemap_custom',
    'xmlsitemap_engines',
  ], TRUE);
  return t('Modules xmlsitemap_custom, xmlsitemap_engines are enabled.');
}

/**
 * Update oembed provider for alternate kaltura format.
 */
function osu_standard_update_9040(&$sandbox) {
  /** @var \Drupal\Core\Config\Config $kaltura_obembed_provider */
  $kaltura_obembed_provider = Drupal::service('config.factory')
    ->getEditable('oembed_providers.provider.osu_mediaspace');
  $endpoints = $kaltura_obembed_provider->get('endpoints');
  $endpoints[0]['schemes'][] = 'https://media.oregonstate.edu/media/t/*';
  $kaltura_obembed_provider->set('endpoints', $endpoints);
  $kaltura_obembed_provider->save();
}

/**
 * Install Search 404 module.
 */
function osu_standard_update_9041(&$sandbox) {
  Drupal::service('module_installer')->install([
    'search404',
  ], TRUE);
  /** @var Drupal\Core\Config\Config $search404_settings */
  $search404_settings = Drupal::service('config.factory')
    ->getEditable('search404.settings');
  $search404_settings->set('search404_do_custom_search', TRUE);
  $search404_settings->set('search404_custom_search_path', 'search/node?keys=@keys');
  $search404_settings->set('search404_disable_error_message', TRUE);
  $search404_settings->set('search404_use_search_engine', TRUE);
  $search404_settings->set('search404_do_google_cse', TRUE);
  $search404_settings->save();
  return t('Module search404 has been enabled.');
}

/**
 * Set config for Search 404 module.
 */
function osu_standard_update_9042(&$sandbox) {
}

/**
 * Add new role for DX Admin and update cas attributes.
 */
function osu_standard_update_9043(&$sandbox) {
  $install_profile_path = Drupal::service('module_handler')
    ->getModule('osu_standard')
    ->getPath();
  $install_profile_config_path = realpath($install_profile_path . '/config/install');
  /** @var Drupal\Core\Config\FileStorage $file_source */
  $file_source = new FileStorage($install_profile_config_path);
  if (is_null(Role::load('dx_administrator'))) {
    $dx_admin_role_config = $file_source->read('user.role.dx_administrator');
    $dx_admin_role = Role::create($dx_admin_role_config);
    $dx_admin_role->save();
  }
  /** @var Drupal\Core\Config\Config $cas_attributes */
  $cas_attributes = Drupal::service('config.factory')
    ->getEditable('cas_attributes.settings');

  $cas_attributes->set('token_allowed_attributes', []);
}

/**
 * Update version of Font Awesome.
 */
function osu_standard_update_9044(&$sandbox) {
  /** @var Drupal\Core\Config\Config $font_awesome_settings */
  $font_awesome_settings = Drupal::service('config.factory')
    ->getEditable('fontawesome.settings');
  $font_awesome_settings->set('external_svg_location', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.2/css/all.min.css');
  $font_awesome_settings->set('external_shim_location', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.2/css/v4-shims.min.css');
  $font_awesome_settings->save();
}

/**
 * Install Simple Popup Blocks.
 */
function osu_standard_update_9045(&$sandbox) {
  Drupal::service('module_installer')->install([
    'osu_simple_popup_blocks',
    'simple_popup_blocks',
  ], TRUE);
  $dx_administrator = Role::load('dx_administrator');
  $dx_administrator->grantPermission('administer simple_popup_blocks');
  $dx_administrator->save();

  $architect = Role::load('architect');
  $architect->grantPermission('administer simple_popup_blocks');
  $architect->save();

  $manage_site_configuration = Role::load('manage_site_configuration');
  $manage_site_configuration->grantPermission('administer simple_popup_blocks');
  $manage_site_configuration->save();

  $manage_blocks = Role::load('manage_blocks');
  $manage_blocks->grantPermission('administer simple_popup_blocks');
  $manage_blocks->save();
}

/**
 * Add new modules and Update CKEditor.
 */
function osu_standard_update_9046(&$sandbox) {
  Drupal::service('module_installer')->install([
    'admin_toolbar_search',
    'image_effects',
  ], TRUE);

  $authenticated_user = Role::load('authenticated');
  $authenticated_user->grantPermission('use admin toolbar search');
  $authenticated_user->save();

  $media_view_modes_new = [
    "frameless" => "frameless",
    "media_card" => "media_card",
    "osu_orange_bottom" => "osu_orange_bottom",
    "video_720" => "video_720",
  ];
  /** @var Drupal\Core\Config\Config $filter_full_html */
  $filter_full_html = Drupal::service('config.factory')
    ->getEditable('filter.format.full_html');
  $filter_full_html_filters = $filter_full_html->get('filters');
  $filter_full_html_filters['media_embed']['settings']['allowed_view_modes'] = array_merge($filter_full_html_filters['media_embed']['settings']['allowed_view_modes'], $media_view_modes_new);
  $filter_full_html_filters['media_embed']['settings']['allowed_media_types']['kaltura'] = "kaltura";
  $filter_full_html->set('filters', $filter_full_html_filters);
  $filter_full_html->save();
}

/**
 * Add new module(s) to existing sites.
 */
function osu_standard_update_9047(&$sandbox) {
  Drupal::service('module_installer')->install([
    'views_taxonomy_term_name_depth',
  ], TRUE);
}

/**
 * Add Colorbox, Smart Date and Date Popup
 */
function osu_standard_update_9048(&$sandbox) {
  Drupal::service('module_installer')->install([
    'colorbox',
    'date_popup',
    'smart_date',
  ], TRUE);
  $dx_administrator = Role::load('dx_administrator');
  $dx_administrator->grantPermission('administer smart date formats');
  $dx_administrator->save();

  $architect = Role::load('architect');
  $architect->grantPermission('administer smart date formats');
  $architect->save();

  $manage_site_configuration = Role::load('manage_site_configuration');
  $manage_site_configuration->grantPermission('administer smart date formats');
  $manage_site_configuration->save();

  return t('Added new modules, Colorbox, Date Popup and Smart date. Configured roles for permissions');
}

/**
 * Remove Date Popup.
 */
function osu_standard_update_9049(&$sandbox) {
  Drupal::service('module_installer')->uninstall([
    'date_popup',
  ]);
}

/**
 * Updating paddings and margins.
 */
function osu_standard_update_10000(&$sandbox) {
  $padding = "p-1|Padding 1\r\np-2|Padding 2\r\np-2-5|Padding 2.5\r\np-3|Padding 3\r\np-4|Padding 4\r\np-4-5|Padding 4_5\r\np-5|Padding 5\r\np-6|Padding 6\r\np-7|Padding 7";
  $padding_left = "ps-1|Padding Left 1\r\nps-2|Padding Left 2\r\nps-2-5|Padding Left 2.5\r\nps-3|Padding Left 3\r\nps-4|Padding Left 4\r\nps-4-5|Padding Left 4_5\r\nps-5|Padding Left 5\r\nps-6|Padding Left 6\r\nps-7|Padding 7";
  $padding_top = "pt-1|Padding Top 1\r\npt-2|Padding Top 2\r\npt-2-5|Padding Top 2.5\r\npt-3|Padding Top 3\r\npt-4|Padding Top 4\r\npt-4-5|Padding Top 4_5\r\npt-5|Padding Top 5\r\npt-6|Padding Top 6\r\npt-7|Padding 7";
  $padding_right = "pe-1|Padding Right 1\r\npe-2|Padding Right 2\r\npe-2-5|Padding Right 2.5\r\npe-3|Padding Right 3\r\npe-4|Padding Right 4\r\npe-4-5|Padding Right 4_5\r\npe-5|Padding Right 5\r\npe-6|Padding Right 6\r\npe-7|Padding 7";
  $padding_bottom = "pb-1|Padding Bottom 1\r\npb-2|Padding Bottom 2\r\npb-2-5|Padding Bottom 2.5\r\npb-3|Padding Bottom 3\r\npb-4|Padding Bottom 4\r\npb-4-5|Padding Bottom 4_5\r\npb-5|Padding Bottom 5\r\npb-6|Padding Bottom 6\r\npb-7|Padding 7";
  $margin = "m-1|Margin 1\r\nm-2|Margin 2\r\nm-2-5|Margin 2.5\r\nm-3|Margin 3\r\nm-4|Margin 4\r\nm-4-5|Margin 4_5\r\nm-5|Margin 5\r\nm-6|Margin 6\r\nm-7|Margin 7";
  $margin_left = "ms-1|Margin Left 1\r\nms-2|Margin Left 2\r\nms-2-5|Margin Left 2.5\r\nms-3|Margin Left 3\r\nms-4|Margin Left 4\r\nms-4-5|Margin Left 4_5\r\nms-5|Margin Left 5\r\nms-6|Margin Left 6\r\nms-7|Margin 7";
  $margin_top = "mt-1|Margin Top 1\r\nmt-2|Margin Top 2\r\nmt-2-5|Margin Top 2.5\r\nmt-3|Margin Top 3\r\nmt-4|Margin Top 4\r\nmt-4-5|Margin Top 4_5\r\nmt-5|Margin Top 5\r\nmt-6|Margin Top 6\r\nmt-7|Margin 7";
  $margin_right = "me-1|Margin Right 1\r\nme-2|Margin Right 2\r\nme-2-5|Margin Right 2.5\r\nme-3|Margin Right 3\r\nme-4|Margin Right 4\r\nme-4-5|Margin Right 4_5\r\nme-5|Margin Right 5\r\nme-6|Margin Right 6\r\nme-7|Margin 7";
  $margin_bottom = "mb-1|Margin Bottom 1\r\nmb-2|Margin Bottom 2\r\nmb-2-5|Margin Bottom 2.5\r\nmb-3|Margin Bottom 3\r\nmb-4|Margin Bottom 4\r\nmb-4-5|Margin Bottom 4_5\r\nmb-5|Margin Bottom 5\r\nmb-6|Margin Bottom 6\r\nmb-7|Margin 7";
  $config = Drupal::service('config.factory')
    ->getEditable('bootstrap_styles.settings');
  $config->set('padding', $padding);
  $config->set('padding_left', $padding_left);
  $config->set('padding_top', $padding_top);
  $config->set('padding_right', $padding_right);
  $config->set('padding_bottom', $padding_bottom);
  $config->set('margin', $margin);
  $config->set('margin_left', $margin_left);
  $config->set('margin_top', $margin_top);
  $config->set('margin_right', $margin_right);
  $config->set('margin_bottom', $margin_bottom);
  $config->save();
}

/**
 * Update Roles to now manage Block Content.
 */
function osu_standard_update_10001(&$sandbox) {
  $dx_administrator = Role::load('dx_administrator');
  $dx_administrator->grantPermission('access block library');
  $dx_administrator->grantPermission('administer block content');
  $dx_administrator->grantPermission('administer block types');
  $dx_administrator->save();

  $architect = Role::load('architect');
  $architect->grantPermission('access block library');
  $architect->grantPermission('administer block classes');
  $architect->grantPermission('administer block content');
  $architect->grantPermission('administer block types');
  $architect->save();

  $manage_blocks = Role::load('manage_blocks');
  $manage_blocks->grantPermission('access block library');
  $manage_blocks->grantPermission('administer block content');
  $manage_blocks->grantPermission('administer block types');
  $manage_blocks->save();
}

/**
 * Update Editoria11y to wait for our custom tests.
 */
function osu_standard_update_10002(&$sandbox) {
  /** @var Drupal\Core\Config\Config $editoria11y_settings */
  $editoria11y_settings = Drupal::service('config.factory')
    ->getEditable('editoria11y.settings');
  $editoria11y_settings->set('custom_tests', 1);
  $editoria11y_settings->save();
}

/**
 * Update permissions to allow users to delete files.
 */
function osu_standard_update_10003(&$sandbox) {
  $dx_administrator = Role::load('dx_administrator');
  $dx_administrator->grantPermission('delete any file');
  $dx_administrator->grantPermission('delete own files');
  $dx_administrator->save();

  $architect = Role::load('architect');
  $architect->grantPermission('delete any file');
  $architect->grantPermission('delete own files');
  $architect->save();

  $content_authors = Role::load('content_authors');
  $content_authors->grantPermission('access files overview');
  $content_authors->grantPermission('delete own files');
  $content_authors->save();

  $manage_content = Role::load('manage_content');
  $manage_content->grantPermission('access files overview');
  $manage_content->grantPermission('delete any file');
  $manage_content->grantPermission('delete own files');
  $manage_content->save();

  $authenticated = Role::load('authenticated');
  $authenticated->grantPermission('delete own files');
  $authenticated->save();
}

/**
 * Rollback Search404 configuration setting.
 */
function osu_standard_update_10004(&$sandbox) {
  \Drupal::configFactory()
    ->getEditable('system.site')
    ->set('page.404', '')
    ->save();
}

/**
 * Set the Default option for Madrone Theme 404 page.
 */
function osu_standard_update_10005(&$sandbox) {
  $config_factory = \Drupal::configFactory();
  $editable_config = $config_factory->getEditable('system.theme');
  $default_theme = $editable_config->get('default');
  $theme_config = $config_factory->getEditable("{$default_theme}.settings");
  $theme_config->set('madrone_use_default_404', TRUE);
  $theme_config->save();
}
